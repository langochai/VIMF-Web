// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using BMS.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace BMS.Data
{
    public partial class RTCStockManagementContext
    {
        private IRTCStockManagementContextProcedures _procedures;

        public virtual IRTCStockManagementContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new RTCStockManagementContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IRTCStockManagementContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class RTCStockManagementContextProcedures : IRTCStockManagementContextProcedures
    {
        private readonly RTCStockManagementContext _context;

        public RTCStockManagementContextProcedures(RTCStockManagementContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spGetEmptyPositionsResult>> spGetEmptyPositionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetEmptyPositionsResult>("EXEC @returnValue = [dbo].[spGetEmptyPositions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetImportWarehouseResult>> spGetImportWarehouseAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetImportWarehouseResult>("EXEC @returnValue = [dbo].[spGetImportWarehouse]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetPositionItemResult>> spGetPositionItemAsync(string ItemCode, int? WarehouseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ItemCode",
                    Size = 300,
                    Value = ItemCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WarehouseID",
                    Value = WarehouseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetPositionItemResult>("EXEC @returnValue = [dbo].[spGetPositionItem] @ItemCode = @ItemCode, @WarehouseID = @WarehouseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
